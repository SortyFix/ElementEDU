package de.gaz.eedu.user.privileges;

import com.fasterxml.jackson.annotation.JsonBackReference;
import de.gaz.eedu.entity.model.EntityModelRelation;
import de.gaz.eedu.user.group.GroupEntity;
import de.gaz.eedu.user.privileges.model.PrivilegeModel;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import lombok.*;
import org.jetbrains.annotations.Contract;
import org.springframework.security.core.authority.SimpleGrantedAuthority;

import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

@Entity @Getter @AllArgsConstructor @NoArgsConstructor @Setter @Table(name = "privilege_entity") public class PrivilegeEntity implements EntityModelRelation<PrivilegeModel>
{
    private final static Set<String> PROTECTED_PRIVILEGES;

    static {
        PROTECTED_PRIVILEGES = new HashSet<>(Set.of(
                "USER_GET",
                "USER_DELETE",
                "USER_CREATE",

                "USER_GROUP_ATTACH",
                "USER_GROUP_DETACH",

                "GROUP_GET",
                "GROUP_CREATE",
                "GROUP_DELETE",

                "GROUP_PRIVILEGE_GRANT",
                "GROUP_PRIVILEGE_REVOKE",

                "PRIVILEGE_GET",
                "PRIVILEGE_CREATE",
                "PRIVILEGE_DELETE",

                "USER_CREDENTIAL_OTHERS_CREATE",
                "USER_CREDENTIAL_OTHERS_DELETE",
                "USER_CREDENTIAL_OTHERS_CREATE_TEMPORARY"
        ));
    }

    public static Set<String> getProtectedPrivileges()
    {
        return PROTECTED_PRIVILEGES;
    }

    @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Setter(AccessLevel.NONE) // ID is final
    private Long id;
    private String name;
    @JsonBackReference @ManyToMany(mappedBy = "privileges", fetch = FetchType.LAZY) private final Set<GroupEntity> groupEntities = new HashSet<>();

    public @NotNull SimpleGrantedAuthority toAuthority()
    {
        return new SimpleGrantedAuthority(getName());
    }

    @Override public PrivilegeModel toModel()
    {
        return new PrivilegeModel(getId(), getName());
    }

    @Override public boolean isDeletable()
    {
        return !PROTECTED_PRIVILEGES.contains(getName());
    }

    @Contract(pure = true, value = "-> new")
    @Override public String toString()
    { // Automatically generated by IntelliJ
        return "PrivilegeEntity{" +
                "id=" + id +
                ", name='" + name + '\'' +
                '}';
    }

    @Override public boolean equals(Object object)
    { // Automatically generated by IntelliJ
        if (this == object) {return true;}
        if (object == null || getClass() != object.getClass()) {return false;}
        PrivilegeEntity that = (PrivilegeEntity) object;
        return Objects.equals(getId(), that.getId());
    }

    @Override public int hashCode()
    { // Automatically generated by IntelliJ
        return Objects.hash(getId());
    }
}