package de.gaz.eedu.course;

import com.fasterxml.jackson.annotation.JsonManagedReference;
import de.gaz.eedu.course.model.CourseModel;
import de.gaz.eedu.course.subjects.SubjectEntity;
import de.gaz.eedu.entity.model.EntityModelRelation;
import de.gaz.eedu.user.UserEntity;
import de.gaz.eedu.user.model.UserModel;
import jakarta.persistence.*;
import lombok.*;
import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.NotNull;

import java.util.*;
import java.util.function.Predicate;
import java.util.stream.Collectors;

@Entity
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Table(name = "course_entity")
public class CourseEntity implements EntityModelRelation<CourseModel>
{
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) @Setter(AccessLevel.NONE) private Long id; // ID is final
    private String name;
    @ManyToMany
    @JsonManagedReference
    @JoinTable(name = "course_users", joinColumns = @JoinColumn(name = "course_id", referencedColumnName = "id"), inverseJoinColumns = @JoinColumn(name = "user_id", referencedColumnName = "id"))
    private final Set<UserEntity> users = new HashSet<>();
    @ManyToOne
    @JsonManagedReference
    @JoinColumn(name = "subject_id", referencedColumnName = "id")
    private SubjectEntity subject;

    @Override
    public CourseModel toModel()
    {
        return new CourseModel(getId(),
                getName(),
                getSubject().toModel(),
                getUsers().stream().map(UserEntity::toModel).toArray(UserModel[]::new));
    }

    public boolean attachUser(@NotNull CourseService courseService, @NonNull UserEntity... user)
    {
        return saveEntityIfPredicateTrue(courseService, user, this::attachUser);
    }

    public boolean attachUser(@NonNull UserEntity... user)
    {
        // Filter already attached users out
        Predicate<UserEntity> predicate = requestedGroup -> getUsers().stream().noneMatch(presentUser -> Objects.equals(
                presentUser,
                requestedGroup));
        return this.users.addAll(Arrays.stream(user).filter(predicate).collect(Collectors.toSet()));
    }

    public boolean detachUser(@NotNull CourseService courseService, @NonNull Long... ids)
    {
        return saveEntityIfPredicateTrue(courseService, ids, this::detachUser);
    }

    public boolean detachUser(@NonNull Long... ids)
    {
        List<Long> detachGroupIds = Arrays.asList(ids);
        return this.users.removeIf(groupEntity -> detachGroupIds.contains(groupEntity.getId()));
    }

    private <T> boolean saveEntityIfPredicateTrue(@NotNull CourseService courseService, @NotNull T entity, @NotNull Predicate<T> predicate)
    {
        if (predicate.test(entity))
        {
            courseService.saveEntity(this);
            return true;
        }
        return false;
    }

    @Contract(pure = true)
    @Override
    public @NotNull String toString()
    { // Automatically generated by IntelliJ
        return "CourseEntity{" + "id=" + id + ", name='" + name + '\'' + ", users=" + users + ", subject=" + subject + '}';
    }

    @Override
    public boolean equals(Object o)
    { // Automatically generated by IntelliJ
        if (this == o) { return true; }
        if (o == null || getClass() != o.getClass()) { return false; }
        CourseEntity that = (CourseEntity) o;
        return Objects.equals(getId(), that.getId());
    }

    @Override
    public int hashCode()
    { // Automatically generated by IntelliJ
        return Objects.hashCode(getId());
    }
}
