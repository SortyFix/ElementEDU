package de.gaz.eedu.course.classroom;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import de.gaz.eedu.course.CourseEntity;
import de.gaz.eedu.course.classroom.model.ClassRoomModel;
import de.gaz.eedu.course.model.CourseModel;
import de.gaz.eedu.entity.model.EntityModelRelation;
import de.gaz.eedu.user.UserEntity;
import de.gaz.eedu.user.model.UserModel;
import jakarta.persistence.*;
import lombok.*;
import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.NotNull;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.web.server.ResponseStatusException;

import java.util.*;
import java.util.function.Predicate;
import java.util.stream.Collectors;

@Entity @Getter @Setter @AllArgsConstructor @NoArgsConstructor @Table(name = "class_room_entity")
public class ClassRoomEntity implements EntityModelRelation<ClassRoomModel>
{
    @OneToMany @JsonManagedReference
    @JoinTable(name = "class_users", joinColumns = @JoinColumn(name = "class_id", referencedColumnName = "id"), inverseJoinColumns = @JoinColumn(name = "user_id", referencedColumnName = "id"))
    @Getter(AccessLevel.NONE) private final Set<UserEntity> users = new HashSet<>();
    @OneToMany(mappedBy = "classRoom") @JsonBackReference private final Set<CourseEntity> courses = new HashSet<>();
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Setter(AccessLevel.NONE) private Long id;
    private String name;

    @Override public ClassRoomModel toModel()
    {
        //TODO
        return new ClassRoomModel(getId(), getName(), new UserModel[0], new CourseModel[0]);
    }

    public @NotNull Optional<UserEntity> getTutor()
    {
        return getStudents().stream().filter(user -> user.hasRole("teacher")).findFirst();
    }

    public boolean setTutor(@NotNull ClassRoomService classRoomService, @NotNull UserEntity userEntity)
    {
        return saveEntityIfPredicateTrue(classRoomService, userEntity, this::setTutor);
    }

    public boolean setTutor(@NotNull UserEntity userEntity)
    {
        if (!userEntity.hasRole("teacher"))
        {
            String errorMessage =  "The provided user is not a teacher.";
            throw new ResponseStatusException(HttpStatus.NOT_ACCEPTABLE, errorMessage, new IllegalArgumentException());
        }

        if (this.users.removeIf(user -> userEntity.hasRole("teacher")))
        {
            String logMessage = "The tutor from classroom {} has been overridden.";
            LoggerFactory.getLogger(ClassRoomEntity.class).info(logMessage, getId());
        }

        return this.users.add(userEntity);
    }

    public boolean attachStudents(@NotNull ClassRoomService classRoomService, @NonNull UserEntity... user)
    {
        return saveEntityIfPredicateTrue(classRoomService, user, this::attachStudents);
    }

    public boolean attachStudents(@NonNull UserEntity... user)
    {
        return this.users.addAll(Arrays.stream(user).filter(noTeacher()).collect(Collectors.toSet()));
    }

    public boolean detachStudents(@NotNull ClassRoomService classRoomService, @NonNull Long... ids)
    {
        return saveEntityIfPredicateTrue(classRoomService, ids, this::detachStudents);
    }

    public boolean detachStudents(@NonNull Long... ids)
    {
        List<Long> detachGroupIds = Arrays.asList(ids);
        return this.users.removeIf(user -> detachGroupIds.contains(user.getId()));
    }

    public @NotNull Set<UserEntity> getStudents()
    {
        return users.stream().filter(noTeacher()).collect(Collectors.toSet());
    }

    private <T> boolean saveEntityIfPredicateTrue(@NotNull ClassRoomService classRoomService, @NotNull T test, @NotNull Predicate<T> predicate)
    {
        if (predicate.test(test))
        {
            classRoomService.saveEntity(this);
            return true;
        }
        return false;
    }

    @Contract(pure = true, value = "-> new") private @NotNull Predicate<UserEntity> noTeacher()
    {
        return current -> !current.hasRole("teacher");
    }

    @Contract(pure = true) @Override public @NotNull String toString()
    { // Automatically generated by IntelliJ
        return "ClassRoomEntity{" + "id=" + id + ", name='" + name + '\'' + ", users=" + users + ", courses=" + courses + '}';
    }

    @Override public boolean equals(Object o)
    { // Automatically generated by IntelliJ
        if (this == o) { return true; }
        if (o == null || getClass() != o.getClass()) { return false; }
        ClassRoomEntity that = (ClassRoomEntity) o;
        return Objects.equals(getId(), that.getId());
    }

    @Override public int hashCode()
    { // Automatically generated by IntelliJ
        return Objects.hashCode(getId());
    }
}
