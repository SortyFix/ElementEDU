package de.gaz.eedu.course;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import de.gaz.eedu.course.model.ClassRoomModel;
import de.gaz.eedu.course.model.CourseModel;
import de.gaz.eedu.entity.model.EntityModelRelation;
import de.gaz.eedu.user.UserEntity;
import de.gaz.eedu.user.model.UserModel;
import jakarta.persistence.*;
import lombok.*;
import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.NotNull;

import java.util.*;
import java.util.function.Predicate;
import java.util.stream.Collectors;

@Entity
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Table(name = "class_room_entity")
public class ClassRoomEntity implements EntityModelRelation<ClassRoomModel>
{
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Setter(AccessLevel.NONE)
    private Long id;
    private String name;

    @ManyToMany
    @JsonManagedReference
    @JoinTable(name = "class_users", joinColumns = @JoinColumn(name = "class_id", referencedColumnName = "id"), inverseJoinColumns = @JoinColumn(name = "user_id", referencedColumnName = "id"))
    private final Set<UserEntity> users = new HashSet<>();

    @OneToMany(mappedBy = "classRoom")
    @JsonBackReference
    private final Set<CourseEntity> courses = new HashSet<>();

    @Override
    public ClassRoomModel toModel()
    {
        //TODO
        return new ClassRoomModel(getId(), getName(), new UserModel[0], new CourseModel[0]);
    }

    public boolean attachUser(@NotNull ClassRoomService classRoomService, @NonNull UserEntity... user)
    {
        return saveEntityIfPredicateTrue(classRoomService, user, this::attachUser);
    }

    public boolean attachUser(@NonNull UserEntity... user)
    {
        // Filter already attached users out
        Predicate<UserEntity> predicate = present -> getUsers().stream().noneMatch(presentUser -> Objects.equals(
                presentUser,
                present));
        return this.users.addAll(Arrays.stream(user).filter(predicate).collect(Collectors.toSet()));
    }

    public boolean detachUser(@NotNull ClassRoomService classRoomService, @NonNull Long... ids)
    {
        return saveEntityIfPredicateTrue(classRoomService, ids, this::detachUser);
    }

    public boolean detachUser(@NonNull Long... ids)
    {
        List<Long> detachGroupIds = Arrays.asList(ids);
        return this.users.removeIf(user -> detachGroupIds.contains(user.getId()));
    }

    private <T> boolean saveEntityIfPredicateTrue(@NotNull ClassRoomService classRoomService, @NotNull T test, @NotNull Predicate<T> predicate)
    {
        if (predicate.test(test))
        {
            classRoomService.saveEntity(this);
            return true;
        }
        return false;
    }


    @Contract(pure = true)
    @Override
    public @NotNull String toString()
    { // Automatically generated by IntelliJ
        return "ClassRoomEntity{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", users=" + users +
                ", courses=" + courses +
                '}';
    }

    @Override
    public boolean equals(Object o)
    { // Automatically generated by IntelliJ
        if (this == o) { return true; }
        if (o == null || getClass() != o.getClass()) { return false; }
        ClassRoomEntity that = (ClassRoomEntity) o;
        return Objects.equals(getId(), that.getId());
    }

    @Override
    public int hashCode()
    { // Automatically generated by IntelliJ
        return Objects.hashCode(getId());
    }
}
