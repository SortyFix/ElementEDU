package de.gaz.eedu.course.appointment.scheduled;


import com.fasterxml.jackson.annotation.JsonBackReference;
import de.gaz.eedu.course.CourseEntity;
import de.gaz.eedu.course.appointment.entry.AppointmentEntryEntity;
import de.gaz.eedu.course.appointment.scheduled.model.ScheduledAppointmentModel;
import de.gaz.eedu.entity.model.EntityModelRelation;
import jakarta.persistence.*;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.NotNull;

import java.time.Duration;
import java.time.Instant;
import java.time.Period;
import java.util.Objects;
import java.util.Set;

@Setter @Entity @Getter @NoArgsConstructor
public class ScheduledAppointmentEntity implements EntityModelRelation<ScheduledAppointmentModel>
{
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Setter(AccessLevel.NONE) private long id;
    @JsonBackReference @ManyToOne(optional = false) @JoinColumn(name = "course_id", referencedColumnName = "id")
    private CourseEntity course;
    private Instant startTimeStamp, endTimeStamp;
    private Duration duration;
    private Period period;
    @JsonBackReference @OneToMany(mappedBy = "scheduledAppointment") private Set<AppointmentEntryEntity> entries;

    @Override public @NotNull ScheduledAppointmentModel toModel()
    {
        return new ScheduledAppointmentModel(getId(), getStartTimeStamp().getEpochSecond(), getEndTimeStamp().getEpochSecond(), getDuration().getSeconds(), getPeriodSeconds());
    }

    public boolean inPeriod(@NotNull Instant timeStamp)
    {
        if (getStartTimeStamp().isAfter(timeStamp) || getEndTimeStamp().isBefore(timeStamp))
        {
            return false;
        }

        long delta = timeStamp.getEpochSecond() - getStartTimeStamp().getEpochSecond();
        return delta % getPeriodSeconds() == 0;
    }

    public long getPeriodSeconds()
    {
        return (long) this.getPeriod().getDays() * 24 * 60 * 60;
    }


    @Contract(pure = true)
    @Override public String toString()
    { // Automatically generated by IntelliJ
        return "ScheduledAppointmentEntity{" +
                "startTimeStamp=" + startTimeStamp +
                ", endTimeStamp=" + endTimeStamp +
                ", duration=" + duration +
                ", period=" + period +
                '}';
    }

    @Override public boolean equals(Object object)
    { // Automatically generated by IntelliJ
        if (this == object) {return true;}
        if (object == null || getClass() != object.getClass()) {return false;}
        ScheduledAppointmentEntity that = (ScheduledAppointmentEntity) object;
        return getId() == that.getId();
    }

    @Override public int hashCode()
    { // Automatically generated by IntelliJ
        return Objects.hashCode(getId());
    }
}
