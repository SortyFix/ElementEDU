package de.gaz.eedu.course.appointment.frequent;


import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import de.gaz.eedu.course.CourseEntity;
import de.gaz.eedu.course.appointment.entry.AppointmentEntryEntity;
import de.gaz.eedu.course.appointment.frequent.model.FrequentAppointmentModel;
import de.gaz.eedu.course.room.RoomEntity;
import de.gaz.eedu.entity.model.EntityModelRelation;
import jakarta.persistence.*;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.NotNull;

import java.time.Duration;
import java.time.Instant;
import java.time.Period;
import java.util.Objects;
import java.util.Set;

@Setter @Entity @Getter @NoArgsConstructor
public class FrequentAppointmentEntity implements EntityModelRelation<FrequentAppointmentModel>
{
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Setter(AccessLevel.NONE) private long id;
    @JsonBackReference @ManyToOne(optional = false) @JoinColumn(name = "course_id", referencedColumnName = "id")
    private CourseEntity course;
    private Instant startTimeStamp, untilTimeStamp;
    private Duration duration;
    private Period frequency;
    @JsonBackReference @OneToMany(mappedBy = "frequentAppointment") private Set<AppointmentEntryEntity> entries;

    @ManyToOne @JsonManagedReference @JoinColumn(name = "room_id", referencedColumnName = "id", nullable = false)
    private @NotNull RoomEntity room;

    @Override public @NotNull FrequentAppointmentModel toModel()
    {
        return new FrequentAppointmentModel(getId(),
                getRoom().toModel(),
                getStartTimeStamp().toEpochMilli(),
                getUntilTimeStamp().toEpochMilli(),
                getDuration().toMillis(),
                getFrequencyMillis()
        );
    }

    public boolean inFrequency(@NotNull Instant timeStamp)
    {
        if (getStartTimeStamp().isAfter(timeStamp) || getUntilTimeStamp().isBefore(timeStamp))
        {
            return false;
        }

        long delta = timeStamp.getEpochSecond() - getStartTimeStamp().getEpochSecond();
        return delta % getFrequencySeconds() == 0;
    }

    public long getFrequencySeconds()
    {
        return (long) this.getFrequency().getDays() * 24 * 60 * 60;
    }

    public long getFrequencyMillis()
    {
        return getFrequencySeconds() * 1000;
    }

    @Contract(pure = true)
    @Override public String toString()
    { // Automatically generated by IntelliJ
        return "ScheduledAppointmentEntity{" +
                "startTimeStamp=" + startTimeStamp +
                ", endTimeStamp=" + untilTimeStamp +
                ", duration=" + duration +
                ", period=" + frequency +
                '}';
    }

    @Override public boolean equals(Object object)
    { // Automatically generated by IntelliJ
        if (this == object) {return true;}
        if (object == null || getClass() != object.getClass()) {return false;}
        FrequentAppointmentEntity that = (FrequentAppointmentEntity) object;
        return getId() == that.getId();
    }

    @Override public int hashCode()
    { // Automatically generated by IntelliJ
        return Objects.hashCode(getId());
    }
}
