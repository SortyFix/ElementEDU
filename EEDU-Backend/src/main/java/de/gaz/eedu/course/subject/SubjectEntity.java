package de.gaz.eedu.course.subject;

import com.fasterxml.jackson.annotation.JsonBackReference;
import de.gaz.eedu.course.CourseEntity;
import de.gaz.eedu.course.subject.model.SubjectModel;
import de.gaz.eedu.entity.model.EntityModelRelation;
import jakarta.persistence.*;
import lombok.*;
import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.NotNull;

import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

@Entity @NoArgsConstructor
public class SubjectEntity implements EntityModelRelation<String, SubjectModel>
{
    @Id @Getter @Setter(AccessLevel.NONE) private String id;

    @JsonBackReference @OneToMany(mappedBy = "subject", cascade = CascadeType.REMOVE) // delete courses if subject is deleted.
    private final Set<CourseEntity> courses = new HashSet<>();

    public SubjectEntity(@NotNull String id)
    {
        this.id = id;
    }

    @Override
    public @NotNull SubjectModel toModel()
    {
        return new SubjectModel(getId());
    }

    @Contract(pure = true, value = "-> new")
    @Override public String toString()
    {
        return "SubjectEntity{" +
                "id='" + id + '\'' +
                '}';
    }

    @Override
    public boolean equals(Object o)
    { // Automatically generated by IntelliJ
        if (this == o) { return true; }
        if (o == null || getClass() != o.getClass()) { return false; }
        SubjectEntity that = (SubjectEntity) o;
        return Objects.equals(getId(), that.getId());
    }

    @Override
    public int hashCode()
    { // Automatically generated by IntelliJ
        return Objects.hashCode(getId());
    }
}
