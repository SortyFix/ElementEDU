package de.gaz.eedu.course.subject;

import com.fasterxml.jackson.annotation.JsonBackReference;
import de.gaz.eedu.course.CourseEntity;
import de.gaz.eedu.course.subject.model.SubjectModel;
import de.gaz.eedu.entity.model.EntityModelRelation;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import lombok.*;
import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.NotNull;

import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

/**
 * Represents a subject entity within the system. Subjects define specific subjects that can be used by other components.
 * Each subject is identified by a {@link String} id which is the primary key. It is persisted in the "subject_entity" database table.
 * <p>
 * Subjects are associated with {@link CourseEntity} through a one-to-many relationship. A subject can be set to
 * multiple courses, and a course can only have one subject. This relationship is managed by the database join table implicitly
 * defined by the {@link OneToMany} annotation and the {@code appointments} field.
 * <p>
 * <h6>NOTE!</h6> The relation is cascaded with {@link CascadeType#REMOVE}.
 * This means if a subject gets deleted, all its associated courses also get deleted.
 * <p>
 * <p>
 * This entity implements the {@link EntityModelRelation} interface, enabling conversion to and from the corresponding
 * {@link SubjectModel} for use when communicating with the frontend. This allows for a clean separation between the
 * persistence model (this entity) and the frontend model (the {@link SubjectModel}).
 *
 * @author Ivo Quiring
 * @see CourseEntity
 * @see EntityModelRelation
 * @see SubjectModel
 */
@Entity
@AllArgsConstructor
@NoArgsConstructor
public class SubjectEntity implements EntityModelRelation<String, SubjectModel>
{
    @JsonBackReference @OneToMany(mappedBy = "subject", cascade = CascadeType.REMOVE)
    // delete courses if subject is deleted.
    private final Set<CourseEntity> courses = new HashSet<>();
    @Id @Getter @Setter(AccessLevel.NONE) private String id;

    @Override public @NotNull SubjectModel toModel()
    {
        return new SubjectModel(getId());
    }

    @Contract(pure = true, value = "-> new") @Override public String toString()
    {
        return "SubjectEntity{" + "id='" + id + '\'' + '}';
    }

    @Override public boolean equals(Object o)
    { // Automatically generated by IntelliJ
        if (this == o) {return true;}
        if (o == null || getClass() != o.getClass()) {return false;}
        SubjectEntity that = (SubjectEntity) o;
        return Objects.equals(getId(), that.getId());
    }

    @Override public int hashCode()
    { // Automatically generated by IntelliJ
        return Objects.hashCode(getId());
    }
}
