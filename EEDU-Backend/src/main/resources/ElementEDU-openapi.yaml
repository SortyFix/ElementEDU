openapi: "3.0.3"
info:
  title: "ElementEDU API"
  description: "ElementEDU API"
  version: "1.0.0"
servers:
  - url: "http://localhost:8080"
paths:
  /user/create:
    post:
      summary: "POST user/create"
      operationId: "create"
      security:
        - BearerAuthentication: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateModel"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserModel"
  /user/delete/{id}:
    delete:
      summary: "DELETE user/delete/{id}"
      operationId: "delete"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "boolean"
  /user/get/{id}:
    get:
      summary: "GET user/get/{id}"
      operationId: "getData"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserModel"
  /user/login:
    post:
      summary: "POST user/login"
      operationId: "loginUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginModel"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /user/login/advanced:
    post:
      summary: "POST user/login/advanced"
      operationId: "loginAdvanced"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdvancedUserLoginModel"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /file/delete:
    post:
      summary: "POST file/delete"
      operationId: "deleteFile"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "boolean"
  /file/get/me/info:
    get:
      summary: "GET file/get/me/info"
      operationId: "getCurrentUserFilesInfo"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/FileModel"
  /file/get/{fileIdS}:
    get:
      summary: "GET file/get/{fileIdS}"
      operationId: "downloadFileWithID"
      parameters:
        - name: "fileIdS"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ByteArrayResource"
  /file/get/{id}/info:
    get:
      summary: "GET file/get/{id}/info"
      operationId: "getUserFilesInfo"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/FileModel"
  /file/modify/tags:
    post:
      summary: "POST file/modify/tags"
      operationId: "modifyTags"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  type: "string"
  /file/upload:
    post:
      summary: "POST file/upload"
      operationId: "uploadFile"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "boolean"
  /group/create:
    post:
      summary: "POST group/create"
      operationId: "create"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupCreateModel"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/GroupModel"
  /group/delete/{id}:
    delete:
      summary: "DELETE group/delete/{id}"
      operationId: "delete"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "boolean"
  /group/get/{id}:
    get:
      summary: "GET group/get/{id}"
      operationId: "getData"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/GroupModel"
  /user/me/{id}/theme/get:
    post:
      summary: "POST user/me/{id}/theme/get"
      operationId: "getTheme"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ThemeModel"
    get:
      summary: "GET user/me/{id}/theme/get"
      operationId: "getTheme"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ThemeModel"
  /user/me/{id}/theme/set:
    post:
      summary: "POST user/me/{id}/theme/set"
      operationId: "setTheme"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              type: "string"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ThemeModel"
  /user/theme/create:
    post:
      summary: "POST user/theme/create"
      operationId: "createTheme"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ThemeCreateModel"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ThemeEntity"
  /user/theme/delete:
    post:
      summary: "POST user/theme/delete"
      operationId: "deleteTheme"
      requestBody:
        content:
          application/json:
            schema:
              type: "integer"
              format: "int64"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /privilege/create:
    post:
      summary: "POST privilege/create"
      operationId: "create"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PrivilegeCreateModel"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PrivilegeModel"
  /privilege/delete/{id}:
    delete:
      summary: "DELETE privilege/delete/{id}"
      operationId: "delete"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "boolean"
  /privilege/get/{id}:
    get:
      summary: "GET privilege/get/{id}"
      operationId: "getData"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PrivilegeModel"
  /user/login/twofactor/create:
    post:
      summary: "POST user/login/twofactor/create"
      operationId: "create"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TwoFactorCreateModel"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TwoFactorModel"
  /user/login/twofactor/enable/{method}/{code}:
    get:
      summary: "GET user/login/twofactor/enable/{method}/{code}"
      operationId: "enable"
      parameters:
        - name: "method"
          in: "path"
          required: true
          schema:
            type: "string"
            enum:
              - "EMAIL"
              - "SMS"
              - "TOTP"
        - name: "code"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /user/login/twofactor/select/{method}:
    get:
      summary: "GET user/login/twofactor/select/{method}"
      operationId: "select"
      parameters:
        - name: "method"
          in: "path"
          required: true
          schema:
            type: "string"
            enum:
              - "EMAIL"
              - "SMS"
              - "TOTP"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /user/login/twofactor/verify/{code}:
    get:
      summary: "GET user/login/twofactor/verify/{code}"
      operationId: "verify"
      parameters:
        - name: "code"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /illness/me/excuse:
    post:
      summary: "POST illness/me/excuse"
      operationId: "excuseCurrentUser"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "boolean"
  /illness/me/excuse/upload:
    post:
      summary: "POST illness/me/excuse/upload"
      operationId: "upload"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "boolean"
  /illness/management/respond:
    post:
      summary: "POST illness/management/respond"
      operationId: "respondToNotification"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "boolean"
  /illness/management/user/all:
    get:
      summary: "GET illness/management/user/all"
      operationId: "getNotificationsOfUser"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/IllnessNotificationModel"
  /illness/management/user/open:
    get:
      summary: "GET illness/management/user/open"
      operationId: "getNotificationsWithStatusOfUser"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/IllnessNotificationModel"
  /illness/management/{date}:
    get:
      summary: "GET illness/management/{date}"
      operationId: "getNotificationsOfDate"
      parameters:
        - name: "date"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "date"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/IllnessNotificationModel"
components:
  securitySchemes: # Define your security scheme here
    BearerAuthentication: # Define 'BearerAuth', to be referenced by operations
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserCreateModel:
      type: "object"
      properties:
        firstName:
          type: "string"
        lastName:
          type: "string"
        loginName:
          type: "string"
        password:
          type: "string"
        enabled:
          type: "boolean"
        locked:
          type: "boolean"
        themeId:
          type: "integer"
          format: "int64"
        status:
          type: "string"
          enum:
            - "PRESENT"
            - "EXCUSED"
            - "UNEXCUSED"
            - "PROSPECTIVE"
      required:
        - "firstName"
        - "lastName"
        - "loginName"
        - "password"
        - "enabled"
        - "locked"
        - "themeId"
        - "status"
    TwoFactorModel:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        method:
          type: "string"
          enum:
            - "EMAIL"
            - "SMS"
            - "TOTP"
        enabled:
          type: "boolean"
        claims:
          type: "string"
      required:
        - "id"
        - "method"
    SimpleThemeModel:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        backgroundColor:
          type: "integer"
          format: "int32"
        widgetColor:
          type: "integer"
          format: "int32"
        textColor:
          type: "integer"
          format: "int32"
      required:
        - "id"
        - "name"
    SimplePrivilegeModel:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
    SimpleUserGroupModel:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        privileges:
          type: "array"
          items:
            $ref: "#/components/schemas/SimplePrivilegeModel"
    UserModel:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        firstName:
          type: "string"
        lastName:
          type: "string"
        loginName:
          type: "string"
        enabled:
          type: "boolean"
        locked:
          type: "boolean"
        twoFactor:
          type: "array"
          items:
            $ref: "#/components/schemas/TwoFactorModel"
        theme:
          $ref: "#/components/schemas/SimpleThemeModel"
        groups:
          type: "array"
          items:
            $ref: "#/components/schemas/SimpleUserGroupModel"
        status:
          type: "string"
          enum:
            - "PRESENT"
            - "EXCUSED"
            - "UNEXCUSED"
            - "PROSPECTIVE"
      required:
        - "id"
        - "firstName"
        - "lastName"
        - "loginName"
        - "enabled"
        - "locked"
        - "theme"
        - "status"
    UserLoginModel:
      type: "object"
      properties:
        loginName:
          type: "string"
        password:
          type: "string"
        keepLoggedIn:
          type: "boolean"
      required:
        - "loginName"
        - "password"
        - "keepLoggedIn"
    AdvancedUserLoginModel:
      type: "object"
      properties:
        loginName:
          type: "string"
        password:
          type: "string"
      required:
        - "loginName"
        - "password"
    FileModel:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        fileName:
          type: "string"
        authorId:
          type: "integer"
          format: "int64"
        filePath:
          type: "string"
        permittedUsers:
          type: "array"
          items:
            type: "integer"
            format: "int64"
        permittedGroups:
          type: "array"
          items:
            type: "integer"
            format: "int64"
        tags:
          type: "array"
          items:
            type: "string"
      required:
        - "id"
        - "fileName"
        - "authorId"
        - "filePath"
    ByteArrayResource:
      type: "object"
      properties:
        byteArray:
          type: "array"
          items:
            type: "string"
            format: "byte"
        description:
          type: "string"
      required:
        - "byteArray"
        - "description"
    GroupCreateModel:
      type: "object"
      properties:
        name:
          type: "string"
        twoFactorRequired:
          type: "boolean"
        users:
          type: "array"
          items:
            type: "integer"
            format: "int64"
        privileges:
          type: "array"
          items:
            type: "integer"
            format: "int64"
      required:
        - "name"
        - "twoFactorRequired"
    SimpleUserModel:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        firstName:
          type: "string"
        lastName:
          type: "string"
        loginName:
          type: "string"
        enabled:
          type: "boolean"
        locked:
          type: "boolean"
        theme:
          $ref: "#/components/schemas/SimpleThemeModel"
        status:
          type: "string"
          enum:
            - "PRESENT"
            - "EXCUSED"
            - "UNEXCUSED"
            - "PROSPECTIVE"
    GroupModel:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        users:
          type: "array"
          items:
            $ref: "#/components/schemas/SimpleUserModel"
        privileges:
          type: "array"
          items:
            $ref: "#/components/schemas/SimplePrivilegeModel"
      required:
        - "id"
    ThemeModel:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        backgroundColor:
          type: "integer"
          format: "int32"
        widgetColor:
          type: "integer"
          format: "int32"
        textColor:
          type: "integer"
          format: "int32"
        users:
          type: "array"
          items:
            $ref: "#/components/schemas/SimpleUserModel"
      required:
        - "id"
        - "name"
        - "users"
    ThemeCreateModel:
      type: "object"
      properties:
        name:
          type: "string"
        backgroundColor:
          type: "integer"
          format: "int32"
        widgetColor:
          type: "integer"
          format: "int32"
        textColor:
          type: "integer"
          format: "int32"
    TwoFactorEntity:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        method:
          type: "string"
          enum:
            - "EMAIL"
            - "SMS"
            - "TOTP"
        data:
          type: "string"
        secret:
          type: "string"
        enabled:
          type: "boolean"
        user:
          $ref: "#/components/schemas/UserEntity"
    PrivilegeEntity:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        groupEntities:
          type: "array"
          items:
            $ref: "#/components/schemas/GroupEntity"
    GroupEntity:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        twoFactorRequired:
          type: "boolean"
        users:
          type: "array"
          items:
            $ref: "#/components/schemas/UserEntity"
        privileges:
          type: "array"
          items:
            $ref: "#/components/schemas/PrivilegeEntity"
    UserEntity:
      type: "object"
      properties:
        status:
          type: "string"
          enum:
            - "PRESENT"
            - "EXCUSED"
            - "UNEXCUSED"
            - "PROSPECTIVE"
        id:
          type: "integer"
          format: "int64"
        firstName:
          type: "string"
        lastName:
          type: "string"
        loginName:
          type: "string"
        password:
          type: "string"
        enabled:
          type: "boolean"
        locked:
          type: "boolean"
        twoFactors:
          type: "array"
          items:
            $ref: "#/components/schemas/TwoFactorEntity"
        themeEntity:
          $ref: "#/components/schemas/ThemeEntity"
        groups:
          type: "array"
          items:
            $ref: "#/components/schemas/GroupEntity"
    ThemeEntity:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        backgroundColor:
          type: "integer"
          format: "int32"
        widgetColor:
          type: "integer"
          format: "int32"
        textColor:
          type: "integer"
          format: "int32"
        users:
          type: "array"
          items:
            $ref: "#/components/schemas/UserEntity"
    PrivilegeCreateModel:
      type: "object"
      properties:
        name:
          type: "string"
        groupEntities:
          type: "array"
          items:
            $ref: "#/components/schemas/GroupEntity"
      required:
        - "name"
    SimplePrivilegeGroupModel:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        users:
          type: "array"
          items:
            $ref: "#/components/schemas/SimpleUserModel"
    PrivilegeModel:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        groups:
          type: "array"
          items:
            $ref: "#/components/schemas/SimplePrivilegeGroupModel"
      required:
        - "id"
        - "name"
    TwoFactorCreateModel:
      type: "object"
      properties:
        userID:
          type: "integer"
          format: "int64"
        method:
          type: "string"
        data:
          type: "string"
      required:
        - "userID"
        - "method"
        - "data"
    IllnessNotificationModel:
      type: "object"
      properties:
        illnessId:
          type: "integer"
          format: "int64"
        userId:
          type: "integer"
          format: "int64"
        status:
          type: "string"
          enum:
            - "DECLINED"
            - "PENDING"
            - "ACCEPTED"
        date:
          type: "string"
          format: "date"
        reason:
          type: "string"
      required:
        - "illnessId"
        - "userId"
        - "status"
        - "date"
        - "reason"
